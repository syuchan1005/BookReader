scalar Upload

type Query {
    bookInfos(limit: Int = 10 offset: Int = 0 search: String order: BookInfoOrder = Update_Newest history: Boolean = false): BookInfoList!
    bookInfo(id: ID!): BookInfo
    books(id: ID offset: Int = 0 limit: Int = 10 order: BookOrder = ASC): [Book!]!
    book(id: ID!): Book
}

type Mutation {
    ## BookInfo
    addBookInfo(name: String!, thumbnail: Upload, books: [InputBook!], compressBooks: Upload): Result!
    editBookInfo(id: ID!, name: String, thumbnail: String): Result!
    deleteBookInfo(id: ID!): BookInfoResult!

    addBookInfoHistories(histories: [BookInfoHistory!]!): Result!

    ## Book
    addBook(id: ID!, number: String!, file: Upload!): Result!
    addBooks(id: ID!, books: [InputBook!]!): [Result!]!
    editBook(id: ID!, number: String, thumbnail: String): Result!
    deleteBook(id: ID!): Result!
}

type Subscription {
    addBookInfo(name: String!): String!
    addBooks(id: ID!): String!
}

enum BookInfoOrder {
    Update_Newest
    Update_Oldest
    Add_Newest
    Add_Oldest
}

enum BookOrder {
    ASC
    DESC
}

type BookInfo {
    id: ID!
    name: String!
    thumbnail: String
    count: Int!
    history: Boolean!

    books(order: BookOrder = ASC): [Book!]!
}

type Book {
    id: ID!
    thumbnail: String
    number: String!
    pages: Int!

    # infoId: ID!
    info: BookInfo

    prevBook: ID
    nextBook: ID
}

type BookInfoList {
    length: Int!
    infos: [BookInfo!]!
}

type Result {
    success: Boolean!
    code: String
    message: String
}

type BookInfoResult {
    success: Boolean!
    code: String
    message: String
    books: [Book!]!
}

input InputBook {
    number: String!
    file: Upload!
}

input BookInfoHistory {
    name: String!
    count: Int!
}
