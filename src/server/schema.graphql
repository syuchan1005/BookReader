scalar Upload
scalar BigInt
scalar IntRange

type Query {
    ## BookInfo
    bookInfos(
        limit: Int = 10
        offset: Int = 0
        search: String
        order: BookInfoOrder = Update_Newest
        normal: Boolean = true
        history: Boolean = false
        invisible: Boolean = false
    ): BookInfoList!
    bookInfo(id: ID!): BookInfo

    ## Book
    books(id: ID offset: Int = 0 limit: Int = 10 order: BookOrder = ASC): [Book!]!
    book(id: ID!): Book

    ## Debug
    debug_folderSize: Debug_FolderSizes!

    plugins: [Plugin!]!
}

type Mutation {
    ## BookInfo
    addBookInfo(name: String!, thumbnail: Upload, finished: Boolean = false, invisible: Boolean = false): ResultWithInfoId!
    editBookInfo(id: ID!, name: String, thumbnail: String, finished: Boolean invisible: Boolean): Result!
    deleteBookInfo(id: ID!): BookInfoResult!

    addBookInfoHistories(histories: [BookInfoHistory!]!): Result!

    ## Book
    addBook(id: ID!, number: String!, file: Upload!): Result!
    addBooks(id: ID!, books: [InputBook!]!): [Result!]!
    addCompressBook(id: ID!, file: Upload!): ResultWithBookResults!
    editBook(id: ID!, number: String, thumbnail: String): Result!
    deleteBook(id: ID!): Result!

    ## Page
    deletePages(id: ID! pages: IntRange!): Result!
    splitPages(id: ID! pages: IntRange! type: SplitType = VERTICAL): Result!

    ## Debug
    debug_deleteUnusedFolders: Result!
}

type Subscription {
    addBookInfo(name: String!): String!
    addBooks(id: ID!): String!
}

enum BookInfoOrder {
    Update_Newest
    Update_Oldest
    Add_Newest
    Add_Oldest
    Name_Asc
    Name_Desc
}

enum BookOrder {
    ASC
    DESC
}

enum SplitType {
    VERTICAL
    HORIZONTAL
}

type BookInfo {
    id: ID!
    name: String!
    thumbnail: String
    count: Int!
    history: Boolean!
    genres: [String!]!

    books(order: BookOrder = ASC): [Book!]!
}

type Book {
    id: ID!
    thumbnail: String
    number: String!
    pages: Int!

    # infoId: ID!
    info: BookInfo
}

type BookInfoList {
    length: Int!
    infos: [BookInfo!]!
}

type Result {
    success: Boolean!
    code: String
    message: String
}

type ResultWithInfoId {
    success: Boolean!
    code: String
    message: String

    infoId: ID
}

type ResultWithBookResults {
    success: Boolean!
    code: String
    message: String

    bookResults: [Result!]
}

type BookInfoResult {
    success: Boolean!
    code: String
    message: String
    books: [Book!]!
}

type Plugin {
    info: PluginInfo!
    queries: PluginQueries!
}

type PluginInfo {
    name: String!
    version: String!
}

type PluginQueries {
    add: CommonPluginQuery!
}

type CommonPluginQuery {
    name: String!
    args: [String!]!
    subscription: Boolean
}

input InputBook {
    number: String!
    file: Upload!
}

input BookInfoHistory {
    name: String!
    count: Int!
}

## DEBUG

type Debug_FolderSizes {
    tmp: BigInt!
    cache: BigInt!
    book: BigInt!
    unusedBook: BigInt!
    bookInfoCount: Int!
    bookCount: Int!
}
