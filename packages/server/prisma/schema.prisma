generator client {
  provider =        "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = env("DB_FILE")
}

model BookInfo {
  id               String  @id
  name             String
  historyBookCount Int?

  createdAt DateTime @default(dbgenerated("(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))"))
  updatedAt DateTime @updatedAt

  thumbnailBook Book?               @relation(name: "ThumbnailBook")
  books         Book[]              @relation(name: "Books")
  genres        BookInfosToGenres[]

  @@unique([name], name: "BookInfo_name_unique")
  @@index([createdAt], name: "BookInfo_createdAt_index")
  @@index([updatedAt], name: "BookInfo_updatedAt_index")
}

model Book {
  id            String  @id
  infoId        String
  /// zero-indexed page count
  thumbnailPage Int?
  number        String
  pageCount     Int
  thumbnailById String?

  createdAt DateTime @default(dbgenerated("(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))"))
  updatedAt DateTime @updatedAt

  bookInfo    BookInfo  @relation("Books", fields: [infoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thumbnailBy BookInfo? @relation("ThumbnailBook", fields: [thumbnailById], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([infoId, number], name: "Book_infoId_number_unique")
  @@unique([thumbnailById], name: "Book_thumbnailById_unique")
  @@index([infoId, updatedAt], name: "Book_infoId_updatedAt_index")
}

model Genre {
  name        String  @id
  isInvisible Boolean @default(false)

  bookInfos BookInfosToGenres[]
}

model BookInfosToGenres {
  infoId    String
  genreName String

  bookInfo BookInfo @relation(fields: [infoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genre    Genre    @relation(fields: [genreName], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([infoId, genreName])
}
