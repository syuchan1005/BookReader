generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "sqlite"
  url      = env("DB_FILE")
}

model BookInfo {
  id            String              @id
  name          String              @unique
  createdAt     DateTime            @default(dbgenerated("strftime('%Y-%m-%dT%H:%M:%fZ', 'now')"))
  updatedAt     DateTime            @updatedAt
  thumbnailBook Book?               @relation("ThumbnailBook")
  books         Book[]              @relation("Books")
  genres        BookInfosToGenres[]

  @@index([createdAt], map: "BookInfo_createdAt_index")
  @@index([updatedAt], map: "BookInfo_updatedAt_index")
}

model Book {
  id            String    @id
  infoId        String
  /// zero-indexed page count
  thumbnailPage Int?
  number        String
  pageCount     Int
  thumbnailById String?   @unique
  createdAt     DateTime  @default(dbgenerated("strftime('%Y-%m-%dT%H:%M:%fZ', 'now')"))
  updatedAt     DateTime  @updatedAt
  thumbnailBy   BookInfo? @relation("ThumbnailBook", fields: [thumbnailById], references: [id])
  bookInfo      BookInfo  @relation("Books", fields: [infoId], references: [id], onDelete: Cascade)

  @@unique([infoId, number], name: "Book_infoId_number_unique")
  @@index([infoId, updatedAt], map: "Book_infoId_updatedAt_index")
}

model Genre {
  name        String              @id
  isInvisible Boolean             @default(false)
  bookInfos   BookInfosToGenres[]
}

model BookInfosToGenres {
  infoId    String
  genreName String
  genre     Genre    @relation(fields: [genreName], references: [name], onDelete: Cascade)
  bookInfo  BookInfo @relation(fields: [infoId], references: [id], onDelete: Cascade)

  @@id([infoId, genreName])
}
