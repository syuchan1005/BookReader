scalar Upload
scalar BigInt
scalar IntRange

type Query {
    ## BookInfo
    bookInfos(
        length: Int = 10
        offset: Int = 0
        search: String
        genres: [String!] = []
        history: Boolean
        order: BookInfoOrder = Update_Newest
    ): BookInfoList!
    bookInfo(id: ID!): BookInfo

    ## Book
    books(id: ID, offset: Int = 0, limit: Int = 10, order: BookOrder = Number_Asc): [Book!]!
    book(id: ID!): Book

    ## Debug
    debug_folderSize: Debug_FolderSizes!

    plugins: [Plugin!]!

    ## Genre
    genres: [Genre!]!
}

type Mutation {
    ## BookInfo
    addBookInfo(name: String!, genres: [String!]): ResultWithInfoId!
    editBookInfo(id: ID!, name: String, thumbnail: ID, genres: [String!]): Result!
    deleteBookInfo(id: ID!): BookInfoResult!

    addBookInfoHistories(histories: [BookInfoHistory!]!): Result!

    ## Book
    addBooks(id: ID!, books: [InputBook!]!): [Result!]!
    addCompressBook(id: ID!, file: Upload, path: String): ResultWithBookResults!
    editBook(id: ID!, number: String, thumbnail: Int): Result!
    deleteBook(id: ID!): Result!
    deleteBooks(infoId: ID!, ids: [ID!]!): Result!
    moveBooks(infoId: ID!, ids: [ID!]!): Result!

    ## Page
    deletePages(id: ID! pages: IntRange!): Result!
    splitPages(id: ID! pages: IntRange! type: SplitType = VERTICAL): Result!
    editPage(id: ID! page: Int! image: Upload!): Result!
    # if beforePage 0   -> 0, put, 1
    # if beforePage -1  -> put, 0, 1
    # if beforePage 100 -> 100, put, 101
    putPage(id: ID! beforePage: Int! image: Upload!): Result!
    cropPages(id: ID!, pages: IntRange!, left: Int!, width: Int!): Result!
    bulkEditPage(id: ID!, actions: [EditAction!]!): Result!

    ## Debug
    debug_deleteUnusedFolders: Result!

    ## Genre
    deleteGenre(genre: String!): Result!
    editGenre(oldName: String! newName: String invisible: Boolean): Result!
}

type Subscription {
    addBookInfo(name: String!): String!
    addBooks(id: ID!): String!
}

enum BookInfoOrder {
    Update_Newest
    Update_Oldest
    Add_Newest
    Add_Oldest
    Name_Asc
    Name_Desc
}

enum BookOrder {
    Update_Newest
    Update_Oldest
    Number_Asc
    Number_Desc
}

enum SplitType {
    VERTICAL
    HORIZONTAL
}

type BookInfo {
    id: ID!
    name: String!
    thumbnail: BookInfoThumbnail
    count: Int!
    history: Boolean!
    genres: [Genre!]!
    updatedAt: String! # milliseconds unix time string

    books(order: BookOrder = Number_Asc): [Book!]!
}

type BookInfoThumbnail {
    bookId: ID!
    pageIndex: Int!
    bookPageCount: Int!
}

type Book {
    id: ID!
    thumbnail: Int
    number: String!
    pages: Int!
    updatedAt: String! # milliseconds unix time string

    # infoId: ID!
    info: BookInfo
}

type BookInfoList {
    hasNext: Boolean!
    infos: [BookInfo!]!
}

type Result {
    success: Boolean!
    code: String
    message: String
}

type ResultWithInfoId {
    success: Boolean!
    code: String
    message: String

    infoId: ID
}

type ResultWithBookResults {
    success: Boolean!
    code: String
    message: String

    bookResults: [Result!]
}

type BookInfoResult {
    success: Boolean!
    code: String
    message: String
    books: [Book!]!
}

type Plugin {
    info: PluginInfo!
    queries: PluginQueries!
}

type PluginInfo {
    name: String!
    version: String!
}

type PluginQueries {
    add: CommonPluginQuery!
}

type CommonPluginQuery {
    name: String!
    args: [String!]!
    subscription: Boolean
}

type Genre {
    id: Int!
    name: String!
    invisible: Boolean!
}

enum EditType {
    # intermediate operations
    Crop
    Replace

    # terminal operations
    Delete
    Put
    Split
}

input EditAction {
    editType: EditType!

    crop: CropEditAction
    replace: UploadEditAction
    delete: DeleteEditAction
    put: UploadEditAction
    split: SplitEditAction
}

input CropEditAction {
    pageRange: IntRange!
    left: Int
    right: Int
    top: Int
    bottom: Int
}

input UploadEditAction {
    pageIndex: Int!
    image: Upload!
}

input DeleteEditAction {
    pageRange: IntRange!
}

input SplitEditAction {
    pageRange: IntRange!
    splitType: SplitType!
    splitCount: Int = 2
}

input InputBook {
    number: String!
    file: Upload
    path: String
}

input BookInfoHistory {
    name: String!
    count: Int!
}

## DEBUG

type Debug_FolderSizes {
    tmp: BigInt!
    cache: BigInt!
    book: BigInt!
    unusedBook: BigInt!
    bookInfoCount: Int!
    bookCount: Int!
}
